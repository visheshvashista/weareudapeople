version: 2.1
           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build   
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test cases
          command: |
            cd frontend
            npm run test   
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-end test cases
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend vulnerability scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend vulnerability scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backendstack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
                  
  create_inventory:
    working_directory: ~/project
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Add AWS CLI
          command: |
            pip install awscli
            
      - run:
          name: Add back-end ip to ansible inventory and create a file for backend DNS name
          command: |
             echo "[web]" > .circleci/ansible/inventory.txt
               aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> .circleci/ansible/inventory.txt
               
               aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicDNSName' --output text > dns.txt
            
      - persist_to_workspace:
          root: ~/project
          paths: 
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/dns.txt
            
  check_inventory:
    working_directory: ~/project
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout            
      - attach_workspace:
          at: ~/project
      - run:
          name: Check inventory file exists
          command: |
            cat ./.circleci/ansible/inventory.txt
  
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:92:3b:fa:49:6c:96:aa:dd:78:39:3d:d9:a7:75:92"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls -lrt            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml
            
  run_migration:
    docker:
      - image: circleci/node:13.8.0
    environment:
      migration_status: 0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > output.log
            migration_status = grep -c "has been executed successfully" output.log
            
      - run: 
          name: Revert migrations
          command: |
            cat /home/circleci/.npm/_logs/*.log
            npm run migrations:revert
            migration_status: 0
          when: on_fail
          
      - run:
          name: Send migration results to memstash
          command: |
           if [ migration_status -gt 0 ]
           then
             curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$migration_status" https://api.memstash.io/values/migrationStatus
           fi   
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          requires: [build-frontend]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - create_inventory:
          requires: [deploy-infrastructure]
      - check_inventory:
          requires: [create_inventory]
      - configure_infrastructure:
          requires: [check_inventory]
      - run_migration:
          requires: [configure_infrastructure]
