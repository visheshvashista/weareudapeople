version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-stack:
        description: backend stack name
        type: string
        default: udapeople-backendstack-${CIRCLE_WORKFLOW_ID}
      frontend-stack:
        description: frontend stack name
        type: string
        default: udapeople-frontendstack-${CIRCLE_WORKFLOW_ID}
      bucket-name:
        description: frontend S3 bucket name
        type: string
        default: udapeople-"${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stack >>
            aws s3 rm s3://<< parameters.bucket-name >> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      memstash-token:
        description: Memstash token for migration result
        type: string
        default: "token:migration_${CIRCLE_WORKFLOW_ID}"     
    steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" -H << parameters.memstash-token >> --request GET https://api.memstash.io/values/migrationStatus)
            if [ $SUCCESS==1 ] 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
     
 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build   
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test cases
          command: |
            cd frontend
            npm install jest
            npm run test   
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-end test cases
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend vulnerability scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend vulnerability scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
                  
  create_inventory:
    working_directory: ~/project
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Add AWS CLI
          command: |
            pip install awscli
            sudo apt-get install curl
            
      - run:
          name: Add back-end ip to ansible inventory and upload dnsname to memstash
          command: |
             echo "[web]" > .circleci/ansible/inventory.txt
               aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> .circleci/ansible/inventory.txt
               
               aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicDNSName' --output text > dns.txt
               dnsname=`cat dns.txt`
               # save servername to memstash
               curl -H "Content-Type: text/plain" -H "token: API_URL-${CIRCLE_WORKFLOW_ID}" --request PUT --data "dnsname" https://api.memstash.io/values/dnsname
            
      - persist_to_workspace:
          root: ~/project
          paths: 
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/dns.txt
      - destroy-environment
            
  check_inventory:
    working_directory: ~/project
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout            
      - attach_workspace:
          at: ~/project
      - run:
          name: Check inventory file exists
          command: |
            cat ./.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:92:3b:fa:49:6c:96:aa:dd:78:39:3d:d9:a7:75:92"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls -lrt            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml
      
      - destroy-environment
            
  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    environment:
      migration_status: 0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > output.log
            migration_status=`grep -c "has been executed successfully"  output.log`
            cat output.log
            echo $migration_status
            if [[ $migration_status -eq 0 ]]  
            then
              cat /home/circleci/.npm/_logs/*.log
              npm run migrations:revert
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$migration_status" https://api.memstash.io/values/migrationStatus
            else  
              migration_status=1
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$migration_status" https://api.memstash.io/values/migrationStatus
            fi
      - destroy-environment
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_13. | bash -
            yum install -y nodejs
      - run:
          name: Get API-URL
          command: |
            DNSNAME=$(curl -H "token: API_URL-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/dnsname)
            API_URL="http://${DNSNAME}:3030/api/status"
            curl -H "Content-Type: text/plain" -H "token:API_URL_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$API_URL" https://api.memstash.io/values/API_URL
            echo "API_URL: ${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --delete
      - destroy-environment
      - revert-migrations
      
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          requires: [build-frontend]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - create_inventory:
          requires: [deploy-infrastructure]
      - check_inventory:
          requires: [create_inventory]
      - configure_infrastructure:
          requires: [check_inventory]
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy-frontend:
          requires: [run_migrations]
